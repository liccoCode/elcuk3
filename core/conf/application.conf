# This is the main configuration file for the application.
# ~~~~~
application.name=core

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%prod.application.mode=prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=EfAcMYPUwJl2AkDnM9JCm55sleqDiBg94y6pKGPF6q0MCOuBwAD4bJOptet6Vwpm

# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja

# Date format
# ~~~~~
date.format=yyyy-MM-dd
# date.format.fr=dd/MM/yyyy

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
# http.port=9000
#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
#http.path=/
http.exposePlayServer=false

# \u5982\u679C\u60F3\u8981\u8BA9 nginx \u5728\u524D\u7AEF, Play \u5728\u540E\u7AEF\u80FD\u591F\u6536\u5230\u524D\u7AEF\u7684 real ip, \u5219\u4E00\u5B9A\u9700\u8981\u8BBE\u7F6E\u8FD9\u4E2A\u503C, \u5426\u5219 play \u4F1A\u8DF3\u8FC7 (proxy header) X-Forward-For \u8BBE\u7F6E\u7684 ip \u7684.
XForwardedSupport=127.0.0.1,173.252.197.142

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
#application.session.cookie=PLAY
# \u6CA1\u6709\u8BBE\u7F6E\u65F6\u95F4, \u90A3\u4E48\u6D4F\u89C8\u5668\u8FDB\u7A0B\u65F6\u95F4\u5185\u6709\u6548
application.session.maxAge=8h
#application.session.secure=true

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
%prod.jvm.memory=-XX:PermSize=64m -XX:MaxPermSize=256m -Xms1024m -Xmx1024m
jvm.memory=-XX:PermSize=64m -XX:MaxPermSize=256m
# Java source level => 1.5, 1.6 or 1.7 (experimental)
java.source=1.6

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
# application.log=INFO
#
# More logging configuration
# application.log.path=/log4j.properties
%prod.application.log.path=/log4j.properties
application.log.path=/log4j_t.properties
# application.log.system.out=off

# Database configuration
# ~~~~~ 
# Enable a database engine if needed.
#
# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
# db=mem
#
# To connect to a local MySQL5 database, use:
# db=mysql://user:pwd@host/database
%prod.db=mysql://root:crater10lake@127.0.0.1:3306/elcuk2
db=mysql://root:crater10lake@127.0.0.1:3306/elcuk2_t
#
# To connect to a local PostgreSQL9 database, use:
# db=postgres://user:pwd@host/database
#
# If you need a full JDBC configuration use the following :
# db.url=jdbc:postgresql:database_name
# db.driver=org.postgresql.Driver
# db.user=root
# db.pass=secret
#
# Connections pool configuration :
# db.pool.timeout=1000
# db.pool.maxSize=30
# db.pool.minSize=10
%prod.db.pool.timeout=10000
%prod.db.pool.maxSize=60
%prod.db.pool.minSize=10
#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
# jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
#
# Specify the ddl generation pattern to use. Set to none to disable it 
# (default to update in DEV mode, and none in PROD mode):
# jpa.ddl=update
jpa.ddl=update
%prod.jpa.dll=update
#
# Debug SQL statements (logged using DEBUG level):
#jpa.debugSQL=true
jpa.debugSQL=true
%prod.jpa.debugSQL=false
#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
%prod.hibernate.hbm2ddl.auto=update
#\u9700\u8981\u6839\u636E Id \u6765\u7684\u4E8C\u7EA7\u7F13\u5B58
hibernate.cache.use_second_level_cache=true
#\u6682\u65F6\u4E0D\u9700\u8981\u6839\u636E\u67E5\u8BE2 SQL \u8BED\u53E5\u7684\u6279\u91CF\u7F13\u5B58
hibernate.cache.use_query_cache=false
#hibernate 3.3 \u4EE5\u4E0A\u7684\u7248\u672C\u4F7F\u7528 region.factory_class \u8FD9\u4E2A\u53C2\u6570\u914D\u7F6E
hibernate.cache.region.factory_class=net.sf.ehcache.hibernate.EhCacheRegionFactory
hibernate.max_fetch_depth=1
# \u5BF9 Lazy Load \u7684\u52A0\u5F3A, \u51CF\u5C11 Lazy Load \u7684 SQL \u6570\u91CF
hibernate.default_batch_fetch_size=24
hibernate.jdbc.batch_size=30
# \u5BF9\u4E8E\u8D85\u7EA7\u5927\u7684\u6570\u636E, \u6BCF\u4E00\u6B21\u53EA\u52A0\u8F7D 1000 \u4E2A, \u4F7F\u7528\u5B8C\u540E\u518D\u52A0\u8F7D 1000 \u4E2A, \u907F\u514D\u6240\u6709\u52A0\u8F7D\u5230\u5185\u5B58\u4E2D\u6EA2\u51FA
hibernate.jdbc.fetch_size=1000

# ...
#
# Store path for Blob content
attachments.path=data/attachments

# Memcached configuration
# ~~~~~ 
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212
#
# Use plain SASL to authenticate for memcached
# memcached.user=
# memcached.password=

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600
# 43200(12 hours)
%prod.http.cacheControl=43200

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true
# \u628A\u7F13\u5B58\u4EA4\u7ED9 nginx \u6765\u5904\u7406
%prod.http.useETag=false

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo
http.userAgent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11

# Mail configuration
# ~~~~~ 
# Default is to use a mock Mailer
mail.smtp=mock


# Or, specify mail host configuration
# \u539F\u6765\u7684 no-replay \u4E0E support \u90AE\u7BB1
#%prod.mail.smtp.host=smtp.gmail.com
#%prod.mail.smtp.user=no-reply@easyacceu.com
#%prod.mail.smtp.user=support@easyacceu.com
#%prod.mail.smtp.pass=Fi0#GR4C^Y
#%prod.mail.smtp.channel=ssl

# Email \u7684\u8BBE\u7F6E\u4F7F\u7528 Amazon SES
%prod.mail.smtp.host=email-smtp.us-east-1.amazonaws.com
%prod.mail.smtp.user=AKIAJK2EC5XKMEZLW2SQ
%prod.mail.smtp.pass=ApTdBH8QIUJ5fLB/j62kwmEjcmXMzxdwCN5bdh79fJRf
%prod.mail.smtp.channel=ssl

#mail.smtp.host=smtp.qq.com
#mail.smtp.user=1733913823
#mail.smtp.pass=meiyoumimamaigao
#mail.smtp.channel=ssl

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %prod.application.baseUrl=http://www.yourdomain.com/
application.baseUrl=http://e.easya.cc/

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10
%prod.play.jobs.pool=15
beanstalkd.dev=false
beanstalkd.url=r.easya.cc
beanstalkd.port=11300

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
%prod.play.pool=4

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files 
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
#%test.module.cobertura=${play.path}/modules/cobertura
%test.application.mode=dev
%test.db.url=jdbc:h2:mem:play;MODE=MYSQL;LOCK_MODE=0
%test.jpa.ddl=update
#%test.mail.smtp=mock

