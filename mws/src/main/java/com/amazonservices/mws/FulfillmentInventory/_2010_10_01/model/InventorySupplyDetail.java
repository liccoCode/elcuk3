package com.amazonservices.mws.FulfillmentInventory._2010_10_01.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for InventorySupplyDetail complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="InventorySupplyDetail">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Quantity" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="SupplyType" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="EarliestAvailableToPick" type="{http://mws.amazonaws.com/FulfillmentInventory/2010-10-01/}Timepoint" minOccurs="0"/>
 *         &lt;element name="LatestAvailableToPick" type="{http://mws.amazonaws.com/FulfillmentInventory/2010-10-01/}Timepoint" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * Generated by AWS Code Generator
 * <p/>
 * Fri Oct 22 09:47:28 UTC 2010
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "InventorySupplyDetail", propOrder = {
    "quantity",
    "supplyType",
    "earliestAvailableToPick",
    "latestAvailableToPick"
})
public class InventorySupplyDetail {

    @XmlElement(name = "Quantity")
    protected Integer quantity;
    @XmlElement(name = "SupplyType")
    protected String supplyType;
    @XmlElement(name = "EarliestAvailableToPick")
    protected Timepoint earliestAvailableToPick;
    @XmlElement(name = "LatestAvailableToPick")
    protected Timepoint latestAvailableToPick;

    /**
     * Default constructor
     * 
     */
    public InventorySupplyDetail() {
        super();
    }

    /**
     * Value constructor
     * 
     */
    public InventorySupplyDetail(final Integer quantity, final String supplyType, final Timepoint earliestAvailableToPick, final Timepoint latestAvailableToPick) {
        this.quantity = quantity;
        this.supplyType = supplyType;
        this.earliestAvailableToPick = earliestAvailableToPick;
        this.latestAvailableToPick = latestAvailableToPick;
    }

    /**
     * Gets the value of the quantity property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getQuantity() {
        return quantity;
    }

    /**
     * Sets the value of the quantity property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setQuantity(Integer value) {
        this.quantity = value;
    }

    public boolean isSetQuantity() {
        return (this.quantity!= null);
    }

    /**
     * Gets the value of the supplyType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSupplyType() {
        return supplyType;
    }

    /**
     * Sets the value of the supplyType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSupplyType(String value) {
        this.supplyType = value;
    }

    public boolean isSetSupplyType() {
        return (this.supplyType!= null);
    }

    /**
     * Gets the value of the earliestAvailableToPick property.
     * 
     * @return
     *     possible object is
     *     {@link Timepoint }
     *     
     */
    public Timepoint getEarliestAvailableToPick() {
        return earliestAvailableToPick;
    }

    /**
     * Sets the value of the earliestAvailableToPick property.
     * 
     * @param value
     *     allowed object is
     *     {@link Timepoint }
     *     
     */
    public void setEarliestAvailableToPick(Timepoint value) {
        this.earliestAvailableToPick = value;
    }

    public boolean isSetEarliestAvailableToPick() {
        return (this.earliestAvailableToPick!= null);
    }

    /**
     * Gets the value of the latestAvailableToPick property.
     * 
     * @return
     *     possible object is
     *     {@link Timepoint }
     *     
     */
    public Timepoint getLatestAvailableToPick() {
        return latestAvailableToPick;
    }

    /**
     * Sets the value of the latestAvailableToPick property.
     * 
     * @param value
     *     allowed object is
     *     {@link Timepoint }
     *     
     */
    public void setLatestAvailableToPick(Timepoint value) {
        this.latestAvailableToPick = value;
    }

    public boolean isSetLatestAvailableToPick() {
        return (this.latestAvailableToPick!= null);
    }

    /**
     * Sets the value of the Quantity property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InventorySupplyDetail withQuantity(Integer value) {
        setQuantity(value);
        return this;
    }

    /**
     * Sets the value of the SupplyType property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InventorySupplyDetail withSupplyType(String value) {
        setSupplyType(value);
        return this;
    }

    /**
     * Sets the value of the EarliestAvailableToPick property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InventorySupplyDetail withEarliestAvailableToPick(Timepoint value) {
        setEarliestAvailableToPick(value);
        return this;
    }

    /**
     * Sets the value of the LatestAvailableToPick property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InventorySupplyDetail withLatestAvailableToPick(Timepoint value) {
        setLatestAvailableToPick(value);
        return this;
    }
    

    /**
     * 
     * XML fragment representation of this object
     * 
     * @return XML fragment for this object. Name for outer
     * tag expected to be set by calling method. This fragment
     * returns inner properties representation only
     */
    protected String toXMLFragment() {
        StringBuffer xml = new StringBuffer();
        if (isSetQuantity()) {
            xml.append("<Quantity>");
            xml.append(getQuantity() + "");
            xml.append("</Quantity>");
        }
        if (isSetSupplyType()) {
            xml.append("<SupplyType>");
            xml.append(escapeXML(getSupplyType()));
            xml.append("</SupplyType>");
        }
        if (isSetEarliestAvailableToPick()) {
            Timepoint  earliestAvailableToPick = getEarliestAvailableToPick();
            xml.append("<EarliestAvailableToPick>");
            xml.append(earliestAvailableToPick.toXMLFragment());
            xml.append("</EarliestAvailableToPick>");
        } 
        if (isSetLatestAvailableToPick()) {
            Timepoint  latestAvailableToPick = getLatestAvailableToPick();
            xml.append("<LatestAvailableToPick>");
            xml.append(latestAvailableToPick.toXMLFragment());
            xml.append("</LatestAvailableToPick>");
        } 
        return xml.toString();
    }

    /**
     * 
     * Escape XML special characters
     */
    private String escapeXML(String string) {
        StringBuffer sb = new StringBuffer();
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '&':
                sb.append("&amp;");
                break;
            case '<':
                sb.append("&lt;");
                break;
            case '>':
                sb.append("&gt;");
                break;
            case '\'':
                sb.append("&#039;");
                break;
            case '"':
                sb.append("&quot;");
                break;
            default:
                sb.append(c);
            }
        }
        return sb.toString();
    }



    /**
     *
     * JSON fragment representation of this object
     *
     * @return JSON fragment for this object. Name for outer
     * object expected to be set by calling method. This fragment
     * returns inner properties representation only
     *
     */
    protected String toJSONFragment() {
        StringBuffer json = new StringBuffer();
        boolean first = true;
        if (isSetQuantity()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("Quantity"));
            json.append(" : ");
            json.append(quoteJSON(getQuantity() + ""));
            first = false;
        }
        if (isSetSupplyType()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("SupplyType"));
            json.append(" : ");
            json.append(quoteJSON(getSupplyType()));
            first = false;
        }
        if (isSetEarliestAvailableToPick()) {
            if (!first) json.append(", ");
            json.append("\"EarliestAvailableToPick\" : {");
            Timepoint  earliestAvailableToPick = getEarliestAvailableToPick();


            json.append(earliestAvailableToPick.toJSONFragment());
            json.append("}");
            first = false;
        }
        if (isSetLatestAvailableToPick()) {
            if (!first) json.append(", ");
            json.append("\"LatestAvailableToPick\" : {");
            Timepoint  latestAvailableToPick = getLatestAvailableToPick();


            json.append(latestAvailableToPick.toJSONFragment());
            json.append("}");
            first = false;
        }
        return json.toString();
    }

    /**
     *
     * Quote JSON string
     */
    private String quoteJSON(String string) {
        StringBuffer sb = new StringBuffer();
        sb.append("\"");
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '"':
                sb.append("\\\"");
                break;
            case '\\':
                sb.append("\\\\");
                break;
            case '/':
                sb.append("\\/");
                break;
            case '\b':
                sb.append("\\b");
                break;
            case '\f':
                sb.append("\\f");
                break;
            case '\n':
                sb.append("\\n");
                break;
            case '\r':
                sb.append("\\r");
                break;
            case '\t':
                sb.append("\\t");
                break;
            default:
                if (c <  ' ') {
                    sb.append("\\u" + String.format("%03x", Integer.valueOf(c)));
                } else {
                sb.append(c);
            }
        }
        }
        sb.append("\"");
        return sb.toString();
    }


}
