package com.amazonservices.mws.orders.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for Money complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name=&quot;Money&quot;&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base=&quot;{http://www.w3.org/2001/XMLSchema}anyType&quot;&gt;
 *       &lt;sequence&gt;
 *         &lt;element name=&quot;CurrencyCode&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}string&quot; minOccurs=&quot;0&quot;/&gt;
 *         &lt;element name=&quot;Amount&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}string&quot; minOccurs=&quot;0&quot;/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * Generated by AWS Code Generator
 * <p/>
 * Sun Feb 06 00:05:50 UTC 2011
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Money", propOrder = { "currencyCode", "amount" })
public class Money {

	@XmlElement(name = "CurrencyCode")
	protected String currencyCode;
	@XmlElement(name = "Amount")
	protected String amount;

	/**
	 * Default constructor
	 * 
	 */
	public Money() {
		super();
	}

	/**
	 * Value constructor
	 * 
	 */
	public Money(final String currencyCode, final String amount) {
		this.currencyCode = currencyCode;
		this.amount = amount;
	}

	/**
	 * Gets the value of the currencyCode property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getCurrencyCode() {
		return currencyCode;
	}

	/**
	 * Sets the value of the currencyCode property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setCurrencyCode(String value) {
		this.currencyCode = value;
	}

	public boolean isSetCurrencyCode() {
		return (this.currencyCode != null);
	}

	/**
	 * Gets the value of the amount property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getAmount() {
		return amount;
	}

	/**
	 * Sets the value of the amount property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setAmount(String value) {
		this.amount = value;
	}

	public boolean isSetAmount() {
		return (this.amount != null);
	}

	/**
	 * Sets the value of the CurrencyCode property.
	 * 
	 * @param value
	 * @return this instance
	 */
	public Money withCurrencyCode(String value) {
		setCurrencyCode(value);
		return this;
	}

	/**
	 * Sets the value of the Amount property.
	 * 
	 * @param value
	 * @return this instance
	 */
	public Money withAmount(String value) {
		setAmount(value);
		return this;
	}

	/**
	 * String representation of the Money object. It returns Currency code and
	 * Amount data if available.
	 */
	@Override
	public String toString() {
		StringBuilder moneyBuilder = new StringBuilder();
		if (isSetCurrencyCode()) {
			moneyBuilder.append("CurrencyCode: ");
			moneyBuilder.append(getCurrencyCode());
			moneyBuilder.append("\n");
		}
		if (isSetAmount()) {
			moneyBuilder.append("Amount: ");
			moneyBuilder.append(getAmount());
		}
		return moneyBuilder.toString();
	}

	/**
	 * 
	 * XML fragment representation of this object
	 * 
	 * @return XML fragment for this object. Name for outer tag expected to be
	 *         set by calling method. This fragment returns inner properties
	 *         representation only
	 */
	public String toXMLFragment() {
		StringBuffer xml = new StringBuffer();
		if (isSetCurrencyCode()) {
			xml.append("<CurrencyCode>");
			xml.append(escapeXML(getCurrencyCode()));
			xml.append("</CurrencyCode>");
		}
		if (isSetAmount()) {
			xml.append("<Amount>");
			xml.append(escapeXML(getAmount()));
			xml.append("</Amount>");
		}
		return xml.toString();
	}

	/**
	 * 
	 * Escape XML special characters
	 */
	private String escapeXML(String string) {
		StringBuffer sb = new StringBuffer();
		int length = string.length();
		for (int i = 0; i < length; ++i) {
			char c = string.charAt(i);
			switch (c) {
			case '&':
				sb.append("&amp;");
				break;
			case '<':
				sb.append("&lt;");
				break;
			case '>':
				sb.append("&gt;");
				break;
			case '\'':
				sb.append("&#039;");
				break;
			case '"':
				sb.append("&quot;");
				break;
			default:
				sb.append(c);
			}
		}
		return sb.toString();
	}

	/**
	 * 
	 * JSON fragment representation of this object
	 * 
	 * @return JSON fragment for this object. Name for outer object expected to
	 *         be set by calling method. This fragment returns inner properties
	 *         representation only
	 * 
	 */
	protected String toJSONFragment() {
		StringBuffer json = new StringBuffer();
		boolean first = true;
		if (isSetCurrencyCode()) {
			if (!first)
				json.append(", ");
			json.append(quoteJSON("CurrencyCode"));
			json.append(" : ");
			json.append(quoteJSON(getCurrencyCode()));
			first = false;
		}
		if (isSetAmount()) {
			if (!first)
				json.append(", ");
			json.append(quoteJSON("Amount"));
			json.append(" : ");
			json.append(quoteJSON(getAmount()));
			first = false;
		}
		return json.toString();
	}

	/**
	 * 
	 * Quote JSON string
	 */
	private String quoteJSON(String string) {
		StringBuffer sb = new StringBuffer();
		sb.append("\"");
		int length = string.length();
		for (int i = 0; i < length; ++i) {
			char c = string.charAt(i);
			switch (c) {
			case '"':
				sb.append("\\\"");
				break;
			case '\\':
				sb.append("\\\\");
				break;
			case '/':
				sb.append("\\/");
				break;
			case '\b':
				sb.append("\\b");
				break;
			case '\f':
				sb.append("\\f");
				break;
			case '\n':
				sb.append("\\n");
				break;
			case '\r':
				sb.append("\\r");
				break;
			case '\t':
				sb.append("\\t");
				break;
			default:
				if (c < ' ') {
					sb
							.append("\\u"
									+ String.format("%03x", Integer.valueOf(c)));
				} else {
					sb.append(c);
				}
			}
		}
		sb.append("\"");
		return sb.toString();
	}

}
