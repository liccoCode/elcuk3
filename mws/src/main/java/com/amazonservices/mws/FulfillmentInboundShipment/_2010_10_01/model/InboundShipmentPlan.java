
package com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for InboundShipmentPlan complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="InboundShipmentPlan">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="ShipmentId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="DestinationFulfillmentCenterId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="ShipToAddress" type="{http://mws.amazonaws.com/FulfillmentInboundShipment/2010-10-01/}Address" minOccurs="0"/>
 *         &lt;element name="LabelPrepType" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="Items" type="{http://mws.amazonaws.com/FulfillmentInboundShipment/2010-10-01/}InboundShipmentPlanItemList" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * Generated by AWS Code Generator
 * <p/>
 * Fri Oct 22 09:48:20 UTC 2010
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "InboundShipmentPlan", propOrder = {
    "shipmentId",
    "destinationFulfillmentCenterId",
    "shipToAddress",
    "labelPrepType",
    "items"
})
public class InboundShipmentPlan {

    @XmlElement(name = "ShipmentId")
    protected String shipmentId;
    @XmlElement(name = "DestinationFulfillmentCenterId")
    protected String destinationFulfillmentCenterId;
    @XmlElement(name = "ShipToAddress")
    protected Address shipToAddress;
    @XmlElement(name = "LabelPrepType")
    protected String labelPrepType;
    @XmlElement(name = "Items")
    protected InboundShipmentPlanItemList items;

    /**
     * Default constructor
     * 
     */
    public InboundShipmentPlan() {
        super();
    }

    /**
     * Value constructor
     * 
     */
    public InboundShipmentPlan(final String shipmentId, final String destinationFulfillmentCenterId, final Address shipToAddress, final String labelPrepType, final InboundShipmentPlanItemList items) {
        this.shipmentId = shipmentId;
        this.destinationFulfillmentCenterId = destinationFulfillmentCenterId;
        this.shipToAddress = shipToAddress;
        this.labelPrepType = labelPrepType;
        this.items = items;
    }

    /**
     * Gets the value of the shipmentId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShipmentId() {
        return shipmentId;
    }

    /**
     * Sets the value of the shipmentId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShipmentId(String value) {
        this.shipmentId = value;
    }

    public boolean isSetShipmentId() {
        return (this.shipmentId!= null);
    }

    /**
     * Gets the value of the destinationFulfillmentCenterId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDestinationFulfillmentCenterId() {
        return destinationFulfillmentCenterId;
    }

    /**
     * Sets the value of the destinationFulfillmentCenterId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDestinationFulfillmentCenterId(String value) {
        this.destinationFulfillmentCenterId = value;
    }

    public boolean isSetDestinationFulfillmentCenterId() {
        return (this.destinationFulfillmentCenterId!= null);
    }

    /**
     * Gets the value of the shipToAddress property.
     * 
     * @return
     *     possible object is
     *     {@link Address }
     *     
     */
    public Address getShipToAddress() {
        return shipToAddress;
    }

    /**
     * Sets the value of the shipToAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link Address }
     *     
     */
    public void setShipToAddress(Address value) {
        this.shipToAddress = value;
    }

    public boolean isSetShipToAddress() {
        return (this.shipToAddress!= null);
    }

    /**
     * Gets the value of the labelPrepType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLabelPrepType() {
        return labelPrepType;
    }

    /**
     * Sets the value of the labelPrepType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLabelPrepType(String value) {
        this.labelPrepType = value;
    }

    public boolean isSetLabelPrepType() {
        return (this.labelPrepType!= null);
    }

    /**
     * Gets the value of the items property.
     * 
     * @return
     *     possible object is
     *     {@link InboundShipmentPlanItemList }
     *     
     */
    public InboundShipmentPlanItemList getItems() {
        return items;
    }

    /**
     * Sets the value of the items property.
     * 
     * @param value
     *     allowed object is
     *     {@link InboundShipmentPlanItemList }
     *     
     */
    public void setItems(InboundShipmentPlanItemList value) {
        this.items = value;
    }

    public boolean isSetItems() {
        return (this.items!= null);
    }

    /**
     * Sets the value of the ShipmentId property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentPlan withShipmentId(String value) {
        setShipmentId(value);
        return this;
    }

    /**
     * Sets the value of the DestinationFulfillmentCenterId property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentPlan withDestinationFulfillmentCenterId(String value) {
        setDestinationFulfillmentCenterId(value);
        return this;
    }

    /**
     * Sets the value of the ShipToAddress property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentPlan withShipToAddress(Address value) {
        setShipToAddress(value);
        return this;
    }

    /**
     * Sets the value of the LabelPrepType property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentPlan withLabelPrepType(String value) {
        setLabelPrepType(value);
        return this;
    }

    /**
     * Sets the value of the Items property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentPlan withItems(InboundShipmentPlanItemList value) {
        setItems(value);
        return this;
    }
    

    /**
     * 
     * XML fragment representation of this object
     * 
     * @return XML fragment for this object. Name for outer
     * tag expected to be set by calling method. This fragment
     * returns inner properties representation only
     */
    protected String toXMLFragment() {
        StringBuffer xml = new StringBuffer();
        if (isSetShipmentId()) {
            xml.append("<ShipmentId>");
            xml.append(escapeXML(getShipmentId()));
            xml.append("</ShipmentId>");
        }
        if (isSetDestinationFulfillmentCenterId()) {
            xml.append("<DestinationFulfillmentCenterId>");
            xml.append(escapeXML(getDestinationFulfillmentCenterId()));
            xml.append("</DestinationFulfillmentCenterId>");
        }
        if (isSetShipToAddress()) {
            Address  shipToAddress = getShipToAddress();
            xml.append("<ShipToAddress>");
            xml.append(shipToAddress.toXMLFragment());
            xml.append("</ShipToAddress>");
        } 
        if (isSetLabelPrepType()) {
            xml.append("<LabelPrepType>");
            xml.append(escapeXML(getLabelPrepType()));
            xml.append("</LabelPrepType>");
        }
        if (isSetItems()) {
            InboundShipmentPlanItemList  items = getItems();
            xml.append("<Items>");
            xml.append(items.toXMLFragment());
            xml.append("</Items>");
        } 
        return xml.toString();
    }

    /**
     * 
     * Escape XML special characters
     */
    private String escapeXML(String string) {
        StringBuffer sb = new StringBuffer();
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '&':
                sb.append("&amp;");
                break;
            case '<':
                sb.append("&lt;");
                break;
            case '>':
                sb.append("&gt;");
                break;
            case '\'':
                sb.append("&#039;");
                break;
            case '"':
                sb.append("&quot;");
                break;
            default:
                sb.append(c);
            }
        }
        return sb.toString();
    }



    /**
     *
     * JSON fragment representation of this object
     *
     * @return JSON fragment for this object. Name for outer
     * object expected to be set by calling method. This fragment
     * returns inner properties representation only
     *
     */
    protected String toJSONFragment() {
        StringBuffer json = new StringBuffer();
        boolean first = true;
        if (isSetShipmentId()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("ShipmentId"));
            json.append(" : ");
            json.append(quoteJSON(getShipmentId()));
            first = false;
        }
        if (isSetDestinationFulfillmentCenterId()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("DestinationFulfillmentCenterId"));
            json.append(" : ");
            json.append(quoteJSON(getDestinationFulfillmentCenterId()));
            first = false;
        }
        if (isSetShipToAddress()) {
            if (!first) json.append(", ");
            json.append("\"ShipToAddress\" : {");
            Address  shipToAddress = getShipToAddress();


            json.append(shipToAddress.toJSONFragment());
            json.append("}");
            first = false;
        }
        if (isSetLabelPrepType()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("LabelPrepType"));
            json.append(" : ");
            json.append(quoteJSON(getLabelPrepType()));
            first = false;
        }
        if (isSetItems()) {
            if (!first) json.append(", ");
            json.append("\"Items\" : {");
            InboundShipmentPlanItemList  items = getItems();


            json.append(items.toJSONFragment());
            json.append("}");
            first = false;
        }
        return json.toString();
    }

    /**
     *
     * Quote JSON string
     */
    private String quoteJSON(String string) {
        StringBuffer sb = new StringBuffer();
        sb.append("\"");
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '"':
                sb.append("\\\"");
                break;
            case '\\':
                sb.append("\\\\");
                break;
            case '/':
                sb.append("\\/");
                break;
            case '\b':
                sb.append("\\b");
                break;
            case '\f':
                sb.append("\\f");
                break;
            case '\n':
                sb.append("\\n");
                break;
            case '\r':
                sb.append("\\r");
                break;
            case '\t':
                sb.append("\\t");
                break;
            default:
                if (c <  ' ') {
                    sb.append("\\u" + String.format("%03x", Integer.valueOf(c)));
                } else {
                sb.append(c);
            }
        }
        }
        sb.append("\"");
        return sb.toString();
    }


}
