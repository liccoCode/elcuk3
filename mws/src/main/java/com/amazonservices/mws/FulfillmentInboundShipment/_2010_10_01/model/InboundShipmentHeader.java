
package com.amazonservices.mws.FulfillmentInboundShipment._2010_10_01.model;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for InboundShipmentHeader complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="InboundShipmentHeader">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="ShipmentName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="ShipFromAddress" type="{http://mws.amazonaws.com/FulfillmentInboundShipment/2010-10-01/}Address" minOccurs="0"/>
 *         &lt;element name="DestinationFulfillmentCenterId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="ShipmentStatus" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="LabelPrepPreference" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * Generated by AWS Code Generator
 * <p/>
 * Fri Oct 22 09:48:20 UTC 2010
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "InboundShipmentHeader", propOrder = {
    "shipmentName",
    "shipFromAddress",
    "destinationFulfillmentCenterId",
    "shipmentStatus",
    "labelPrepPreference"
})
public class InboundShipmentHeader {

    @XmlElement(name = "ShipmentName")
    protected String shipmentName;
    @XmlElement(name = "ShipFromAddress")
    protected Address shipFromAddress;
    @XmlElement(name = "DestinationFulfillmentCenterId")
    protected String destinationFulfillmentCenterId;
    @XmlElement(name = "ShipmentStatus")
    protected String shipmentStatus;
    @XmlElement(name = "LabelPrepPreference")
    protected String labelPrepPreference;

    /**
     * Default constructor
     * 
     */
    public InboundShipmentHeader() {
        super();
    }

    /**
     * Value constructor
     * 
     */
    public InboundShipmentHeader(final String shipmentName, final Address shipFromAddress, final String destinationFulfillmentCenterId, final String shipmentStatus, final String labelPrepPreference) {
        this.shipmentName = shipmentName;
        this.shipFromAddress = shipFromAddress;
        this.destinationFulfillmentCenterId = destinationFulfillmentCenterId;
        this.shipmentStatus = shipmentStatus;
        this.labelPrepPreference = labelPrepPreference;
    }

    /**
     * Gets the value of the shipmentName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShipmentName() {
        return shipmentName;
    }

    /**
     * Sets the value of the shipmentName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShipmentName(String value) {
        this.shipmentName = value;
    }

    public boolean isSetShipmentName() {
        return (this.shipmentName!= null);
    }

    /**
     * Gets the value of the shipFromAddress property.
     * 
     * @return
     *     possible object is
     *     {@link Address }
     *     
     */
    public Address getShipFromAddress() {
        return shipFromAddress;
    }

    /**
     * Sets the value of the shipFromAddress property.
     * 
     * @param value
     *     allowed object is
     *     {@link Address }
     *     
     */
    public void setShipFromAddress(Address value) {
        this.shipFromAddress = value;
    }

    public boolean isSetShipFromAddress() {
        return (this.shipFromAddress!= null);
    }

    /**
     * Gets the value of the destinationFulfillmentCenterId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDestinationFulfillmentCenterId() {
        return destinationFulfillmentCenterId;
    }

    /**
     * Sets the value of the destinationFulfillmentCenterId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDestinationFulfillmentCenterId(String value) {
        this.destinationFulfillmentCenterId = value;
    }

    public boolean isSetDestinationFulfillmentCenterId() {
        return (this.destinationFulfillmentCenterId!= null);
    }

    /**
     * Gets the value of the shipmentStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getShipmentStatus() {
        return shipmentStatus;
    }

    /**
     * Sets the value of the shipmentStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setShipmentStatus(String value) {
        this.shipmentStatus = value;
    }

    public boolean isSetShipmentStatus() {
        return (this.shipmentStatus!= null);
    }

    /**
     * Gets the value of the labelPrepPreference property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLabelPrepPreference() {
        return labelPrepPreference;
    }

    /**
     * Sets the value of the labelPrepPreference property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLabelPrepPreference(String value) {
        this.labelPrepPreference = value;
    }

    public boolean isSetLabelPrepPreference() {
        return (this.labelPrepPreference!= null);
    }

    /**
     * Sets the value of the ShipmentName property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentHeader withShipmentName(String value) {
        setShipmentName(value);
        return this;
    }

    /**
     * Sets the value of the ShipFromAddress property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentHeader withShipFromAddress(Address value) {
        setShipFromAddress(value);
        return this;
    }

    /**
     * Sets the value of the DestinationFulfillmentCenterId property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentHeader withDestinationFulfillmentCenterId(String value) {
        setDestinationFulfillmentCenterId(value);
        return this;
    }

    /**
     * Sets the value of the ShipmentStatus property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentHeader withShipmentStatus(String value) {
        setShipmentStatus(value);
        return this;
    }

    /**
     * Sets the value of the LabelPrepPreference property.
     * 
     * @param value
     * @return
     *     this instance
     */
    public InboundShipmentHeader withLabelPrepPreference(String value) {
        setLabelPrepPreference(value);
        return this;
    }
    

    /**
     * 
     * XML fragment representation of this object
     * 
     * @return XML fragment for this object. Name for outer
     * tag expected to be set by calling method. This fragment
     * returns inner properties representation only
     */
    protected String toXMLFragment() {
        StringBuffer xml = new StringBuffer();
        if (isSetShipmentName()) {
            xml.append("<ShipmentName>");
            xml.append(escapeXML(getShipmentName()));
            xml.append("</ShipmentName>");
        }
        if (isSetShipFromAddress()) {
            Address  shipFromAddress = getShipFromAddress();
            xml.append("<ShipFromAddress>");
            xml.append(shipFromAddress.toXMLFragment());
            xml.append("</ShipFromAddress>");
        } 
        if (isSetDestinationFulfillmentCenterId()) {
            xml.append("<DestinationFulfillmentCenterId>");
            xml.append(escapeXML(getDestinationFulfillmentCenterId()));
            xml.append("</DestinationFulfillmentCenterId>");
        }
        if (isSetShipmentStatus()) {
            xml.append("<ShipmentStatus>");
            xml.append(escapeXML(getShipmentStatus()));
            xml.append("</ShipmentStatus>");
        }
        if (isSetLabelPrepPreference()) {
            xml.append("<LabelPrepPreference>");
            xml.append(escapeXML(getLabelPrepPreference()));
            xml.append("</LabelPrepPreference>");
        }
        return xml.toString();
    }

    /**
     * 
     * Escape XML special characters
     */
    private String escapeXML(String string) {
        StringBuffer sb = new StringBuffer();
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '&':
                sb.append("&amp;");
                break;
            case '<':
                sb.append("&lt;");
                break;
            case '>':
                sb.append("&gt;");
                break;
            case '\'':
                sb.append("&#039;");
                break;
            case '"':
                sb.append("&quot;");
                break;
            default:
                sb.append(c);
            }
        }
        return sb.toString();
    }



    /**
     *
     * JSON fragment representation of this object
     *
     * @return JSON fragment for this object. Name for outer
     * object expected to be set by calling method. This fragment
     * returns inner properties representation only
     *
     */
    protected String toJSONFragment() {
        StringBuffer json = new StringBuffer();
        boolean first = true;
        if (isSetShipmentName()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("ShipmentName"));
            json.append(" : ");
            json.append(quoteJSON(getShipmentName()));
            first = false;
        }
        if (isSetShipFromAddress()) {
            if (!first) json.append(", ");
            json.append("\"ShipFromAddress\" : {");
            Address  shipFromAddress = getShipFromAddress();


            json.append(shipFromAddress.toJSONFragment());
            json.append("}");
            first = false;
        }
        if (isSetDestinationFulfillmentCenterId()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("DestinationFulfillmentCenterId"));
            json.append(" : ");
            json.append(quoteJSON(getDestinationFulfillmentCenterId()));
            first = false;
        }
        if (isSetShipmentStatus()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("ShipmentStatus"));
            json.append(" : ");
            json.append(quoteJSON(getShipmentStatus()));
            first = false;
        }
        if (isSetLabelPrepPreference()) {
            if (!first) json.append(", ");
            json.append(quoteJSON("LabelPrepPreference"));
            json.append(" : ");
            json.append(quoteJSON(getLabelPrepPreference()));
            first = false;
        }
        return json.toString();
    }

    /**
     *
     * Quote JSON string
     */
    private String quoteJSON(String string) {
        StringBuffer sb = new StringBuffer();
        sb.append("\"");
        int length = string.length();
        for (int i = 0; i < length; ++i) {
            char c = string.charAt(i);
            switch (c) {
            case '"':
                sb.append("\\\"");
                break;
            case '\\':
                sb.append("\\\\");
                break;
            case '/':
                sb.append("\\/");
                break;
            case '\b':
                sb.append("\\b");
                break;
            case '\f':
                sb.append("\\f");
                break;
            case '\n':
                sb.append("\\n");
                break;
            case '\r':
                sb.append("\\r");
                break;
            case '\t':
                sb.append("\\t");
                break;
            default:
                if (c <  ' ') {
                    sb.append("\\u" + String.format("%03x", Integer.valueOf(c)));
                } else {
                sb.append(c);
            }
        }
        }
        sb.append("\"");
        return sb.toString();
    }


}
